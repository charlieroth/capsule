name: CI

on:
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgres://capsule:capsule_password@localhost:5432/capsule_dev
  JWT_SECRET: dev-secret-change-me

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: capsule
          POSTGRES_PASSWORD: capsule_password
          POSTGRES_DB: capsule_dev
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ci-cache"

      - name: Install tools
        run: |
          cargo install sqlx-cli --no-default-features --features native-tls,postgres
          cargo install cargo-audit
          cargo install cargo-deny

      - name: Cache SQLx
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/sqlx
            .sqlx
          key: sqlx-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U capsule; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run database migrations
        run: sqlx migrate run

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

      - name: SQLx prepare check
        run: cargo sqlx prepare --check --workspace -- --all-features

      # - name: Security audit
      #   run: cargo audit

      # - name: License/dependency check
      #   run: cargo deny check
